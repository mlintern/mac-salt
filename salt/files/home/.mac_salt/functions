#   ---------------------------------------
#   USEFUL Bash FUNCTIONS
#   ---------------------------------------

#   port:  check what is using a specific port
#   -------------------------------------------------------------------
function port() {
    if [ "$1" -eq "$1" ] 2>/dev/null ; then
        lsof -i :$1
    else
        lsof -i
    fi
}


#   delete_ds:  recursivly delete all .DS_STORE files from current dir
#   -------------------------------------------------------------------
function delete_ds() {
    sudo find . -name "*.DS_STORE*" -depth -type f -exec rm {} \;
}


#   delete_all_ds:  recursivly delete all .DS_STORE files
#   -------------------------------------------------------------------
function delete_all_ds() {
   sudo find / -name "*.DS_STORE*" -depth -type f -exec rm {} \;
}


#   sshgit:  Push to git using an ssh key
#   -------------------------------------------------------------------
function sshgit() {
    if [ $# -eq 0 ]; then
        echo "Git wrapper script that allows you to specify an ssh-key file
Usage:
    sshgit -i ssh-key-file git-command
        "
        return 1
    fi

    # remove temporary file on exit
    trap 'command rm -f /tmp/.git_ssh.$$' 0

    if [ "$1" = "-i" ]; then
        ssh-add $2
        SSH_KEY=$2; shift; shift
        echo "ssh -i $SSH_KEY \$@" > /tmp/.git_ssh.$$
        chmod +x /tmp/.git_ssh.$$
        export GIT_SSH=/tmp/.git_ssh.$$
    fi

    # in case the git command is repeated
    [ "$1" = "git" ] && shift

    # Run the git command
    git "$@"
}

#   update:  Update brew packages and gems
#   -------------------------------------------------------------------
function update() {
    echo "Gem Updates..."
    gem update
    echo "Brew Updates..."
    brew update
    brew upgrade --all
    echo "Cleaning Up Brew Packages..."
    brew cleanup
}

function _unset_ssh_proxy() {
    FILE=$HOME/.ssh/config
    LASTLINE=`tail -1 $FILE`
    if [[ $(echo $LASTLINE | head -c 1) != '#' ]] ; then
        # Remove the last line from ssh/config if it's a ProxyCommand
        FIRSTWORD=`echo $LASTLINE | cut -d " " -f 1`
        if [[ $FIRSTWORD == 'ProxyCommand' ]] ; then
            cp $FILE $FILE.tmp &> /dev/null
            sed '$ d' $FILE.tmp > $FILE
            command rm -f $FILE.tmp
        fi
    fi
}

function _set_ssh_proxy() {
    FILE=$HOME/.ssh/config
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "you must pass a proxy host in \$1 and port in \$2"
        echo
        echo "_set_ssh_proxy adc-proxy.oracle.com 80"
        return 1
    fi

    echo "Setting SSH Proxy Settings: $1:$2"
    _unset_ssh_proxy
    echo -e "\tProxyCommand /usr/local/bin/corkscrew $1 $2 %h %p" >> $FILE
}

function _unset_gem_proxy() {
    FILE=$HOME/.gemrc
    LASTLINE=`tail -1 $FILE`
    if [[ $(echo $LASTLINE | head -c 1) != '#' ]] ; then
        # Remove the last line from ssh/config if it's a ProxyCommand
        FIRSTWORD=`echo $LASTLINE | cut -d " " -f 1`
        if [[ $FIRSTWORD == 'http-proxy:' ]] ; then
            cp $FILE $FILE.tmp &> /dev/null
            sed '$ d' $FILE.tmp > $FILE
            command rm -f $FILE.tmp
        fi
    fi
}

function _set_gem_proxy() {
    FILE=$HOME/.gemrc
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "you must pass a proxy host in \$1 and port in \$2"
        echo
        echo "_set_ssh_proxy adc-proxy.oracle.com 80"
        return 1
    fi

    echo "Setting Gem Proxy Settings: http://$1:$2"
    _unset_gem_proxy
    echo -e "http-proxy: http://$1:$2" >> $FILE
}

function _set_proxy() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "you must pass a proxy host in \$1 and port in \$2"
        echo
        echo "_set_proxy adc-proxy.oracle.com 80"
        return 1
    fi

    echo "Setting Environment Proxy Settings: http://$1:$2"
    export http_proxy=http://$1:$2;
    export HTTP_PROXY=http://$1:$2;
    export https_proxy=http://$1:$2;
    export HTTPS_PROXY=http://$1:$2;
    git config --global http.proxy http://$1:$2;
    git config --global https.proxy http://$1:$2;
    _set_ssh_proxy $1 $2
    _set_gem_proxy $1 $2
}

function disable_proxy() {
    echo "Unsetting Environment Proxy"
    unset http_proxy;
    unset https_proxy;
    unset HTTP_PROXY;
    unset HTTPS_PROXY;
    git config --global --replace-all http.proxy "";
    git config --global --replace-all https.proxy "";
    echo "Unsetting SSH Proxy"
    _unset_ssh_proxy
    echo "Unsetting Gem Proxy"
    _unset_gem_proxy
}

function local_proxy_enable() {
    _set_proxy 127.0.0.1 8840
}

function www_proxy_enable() {
    _set_proxy www-proxy.us.oracle.com 80
}

function rmdc_proxy_enable() {
    _set_proxy rmdc-proxy.oracle.com 80
}

function adc_proxy_enable() {
    _set_proxy adc-proxy.oracle.com 80
}

#   iso_to_usb:  convert iso file to UDRW to use on bootable USB stick
#   -------------------------------------------------------------------
function iso_to_usb() {
    if [ -z "$1" ] && [ -z "$2" ]; then
        echo "Git wrapper script that allows you to specify an ssh-key file
Usage:
    iso_to_usb iso_file /dev/disk_to_use
        "
        return 1
    fi
    TMP_FILE=/tmp/destination_file.img
    echo "Converting ISO file to UDRW format"
    hdiutil convert -format UDRW -o $TMP_FILE $1
    echo "Erasing USB"
    diskutil partitionDisk $2 1 "Free Space" "unused" "100%"
    echo "Copying Image to USB"
    dd if=$TMP_FILE of=$2 bs=1m
    echo "Ejecting Disk"
    diskutil eject $2
    echo "Finished"
}