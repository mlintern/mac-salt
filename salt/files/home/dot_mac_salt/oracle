# Handy functions for CPDM and Oracle specific items

# open up port forwards for
# 1. graylog  (9000)
# 2. m/monit  (9443)
# 3. graphite (8080)
##  cpdm_managment:  open up port forwards for
#   -------------------------------------------------------------------
function cpdm_mgmt {
  if [ -z "$1" ]; then
    echo "You must specify an environment"
    return 1
  fi

  GRAPHITE_PORT=8080
  GRAYLOG_PORT=9000
  MMONIT_PORT=9443

  if [ ! -z "$2" ]; then
    GRAPHITE_PORT=$[$GRAPHITE_PORT+$2]
    GRAYLOG_PORT=$[$GRAYLOG_PORT+$2]
    MMONIT_PORT=$[$MMONIT_PORT+$2]
  fi

  ssh -L $GRAPHITE_PORT:127.0.0.1:80 \
    -L $GRAYLOG_PORT:127.0.0.1:9000 \
    -L $MMONIT_PORT:127.0.0.1:9443 log01-$1;
}


##  salt_sync:  sync your salt directory up to salt01-tor6 or slc1
#   -------------------------------------------------------------------
function salt_sync {
  if [ -z "$1" ]; then
    echo "You must specify an environment"
    return 1
  fi

  host="salt01-$1"
  if [ "$1" == "slc1" ]; then
    host="jenkins"
  fi
  echo "syncing your salt dir to $host";
  pushd ~/dev;
  rsync --delete --exclude .git -azv systems root@$host:;
  popd;
}


##  yum_pull:  sync your local yum repo with jenkins01-slc1
#   -------------------------------------------------------------------
function yum_pull {
  echo "syncing jenkins01-slc1 yum repo to ~/cpdm_jenkins";
  mkdir -p  ~/cpdm_jenkins_repo/yum-tor6/ >/dev/null;
  mkdir -p  ~/cpdm_jenkins_repo/yum-den3/ >/dev/null;

  if [ -z "$1" ] || [ $1 = "tor6" ]; then
  echo "syncing tor6 packages";
  rsync -avz --exclude="*-dev-*" --exclude="*-devel-*" --exclude="*-stage-*" --exclude="*-den3-*"--delete jenkins:/var/lib/jenkins/yum-tor6/ ~/cpdm_jenkins_repo/yum-tor6/
  fi

  if [ -z "$1" ] || [ $1 = "den3" ]; then
  echo "syncing den3 packages";
  rsync -avz --exclude="*-devel-*" --delete jenkins:/var/lib/jenkins/yum-den3/ ~/cpdm_jenkins_repo/yum-den3/
  fi
}


##  yum_push:  push your local yum repo up to yum01-tor6
#   -------------------------------------------------------------------
function yum_push {
  if [ -z "$1" ]; then
    echo "You must specify an environment"
    return 1
  fi

  host="yum01-$1"
  echo "syncing ~/cpdm_jenkins yum repo to $host";
  mkdir -p  ~/cpdm_jenkins_repo/yum-$1/ >/dev/null;
  rsync -azv --delete ~/cpdm_jenkins_repo/yum-$1/* root@$host:/srv/yum/
}


##  validate_md5:  Validate URL MD5sum
#   -------------------------------------------------------------------
function validate_md5 {
  url=$1
  remote_md5=`curl $url | gmd5sum | cut -f 1 -d "-" | sed -e 's/ //g'`
  expected=$2
  if [ "$remote_md5" != "$expected" ]; then
    echo "\e[0;31mRemote md5 '$remote_md5' does not match expected '$expected' for URL $url\e[0m"
    return 1
  else
    echo "\e[0;32mRemote md5 matches expected '$expected' for URL $url\e[0m"
    return 0
  fi
}


##  local_proxy_enable:  set proxy settings to use 127.0.0.1 8840
#   -------------------------------------------------------------------
function local_proxy_enable() {
  _set_proxy 127.0.0.1 8840
}


##  www_proxy_enable:  set proxy settings to use www-proxy.us.oracle.com 80
#   -------------------------------------------------------------------
function www_proxy_enable() {
  _set_proxy www-proxy-adcq7-new.us.oracle.com 80
}


##  rmdc_proxy_enable:  set proxy settings to use rmdc-proxy.oracle.com 80
#   -------------------------------------------------------------------
function rmdc_proxy_enable() {
  _set_proxy rmdc-proxy.oracle.com 80
}


##  adc_proxy_enable:  set proxy settings to use adc-proxy.oracle.com 80
#   -------------------------------------------------------------------
function adc_proxy_enable() {
  _set_proxy adc-proxy.oracle.com 80
}


##  update_slc_proxy:  Set ocna IP address on SLC1 box
#   -------------------------------------------------------------------
function update_slc_proxy {
  if [ -z "$1" ]; then
    echo "You must specify an IP address"
    return 1
  fi
  IP=$1
  USER="mlintern"
  SERVER="slc08uul.us.oracle.com"
  ssh -t $USER@$SERVER "echo 'set \$REMOTE_IP $IP;' > ~/.nginx/proxy_ip; sudo systemctl restart nginx"
}


##  start_oracle_db:  starts oracle database and activemq docker containers
#   -------------------------------------------------------------------
function start_oracle_db {
        pushd $HOME/AMS
        trap popd INT
        docker-compose start
        popd
}

##  stop_oracle_db:  stops oracle database and activemq docker containers
#   -------------------------------------------------------------------
function stop_oracle_db {
        pushd $HOME/AMS
        trap popd INT
        docker-compose stop
        popd
}

##  run_ams_clean_node:  removes all cache, JS files, and node before rebuilding and running ams
#   -------------------------------------------------------------------
function run_ams_clean_node {
  rm src/main/resources/.cache
  rm src/main/resources/node
  rm src/main/resources/node_modules
  rm src/main/resources/static/js/app-p
  ./mvnw spring-boot:run
}

##  run_ams:  removes all cache and JS files before rebuilding and running ams
#   -------------------------------------------------------------------
function run_ams {
  rm src/main/resources/.cache
  rm src/main/resources/static/js/app-p
  ./mvnw spring-boot:run
}
