#   ---------------------------------------
#   USEFUL Git Bash FUNCTIONS
#   ---------------------------------------
#
#   If you want to show the function description in the "mac_salt function" command you must use two # to start line.
#

##  sshgit -i <ssh key file> git-command:  Push to git using an ssh key
#   -------------------------------------------------------------------
function sshgit() {
  if [ $# -eq 0 ]; then
    echo "Git wrapper script that allows you to specify an ssh-key file
Usage:
  sshgit -i ssh-key-file git-command
    "
    return 1
  fi

  # remove temporary file on exit
  trap 'command rm -f /tmp/.git_ssh.$$' 0

  if [ "$1" = "-i" ]; then
    ssh-add $2
    SSH_KEY=$2; shift; shift
    echo "ssh -i $SSH_KEY \$@" > /tmp/.git_ssh.$$
    chmod +x /tmp/.git_ssh.$$
    export GIT_SSH=/tmp/.git_ssh.$$
  fi

  # in case the git command is repeated
  [ "$1" = "git" ] && shift

  # Run the git command
  git "$@"
}


##  clean_all_branches <dir>:  Loop through first level directories of given dir and remove branches from each git repo.
#   -------------------------------------------------------------------
function clean_all_branches() {
  if [ $# -eq 0 ]; then
    echo "Clean up git branches locally
Usage:
  clean_all_branches ~/dev
    "
    return 1
  fi

  curdir=`pwd`
  cd $1
  dir=`pwd`
  for d in */ ; do
    repo=$dir/$d
    echo "$repo"
    cd $repo
    clean_branches
  done
  cd $curdir
}

##  clean_branches:  clean git branches from current directory
#   -------------------------------------------------------------------
function clean_branches() {
  if [ ! -d ".git" ]; then
    echo "This is not a Git repo."
    return 1
  fi
  _clean_merged_remote_branches
}

#  _clean_merged_remote_branches:  loops through the branches of a git repository and deletes all that are not master or current
#   -------------------------------------------------------------------
function _clean_merged_remote_branches() {
  git branch | grep -v "master" | grep -v "*" | xargs git branch -d
}

#  _force_delete_remote_branches:  loops through the branches of a git repository and deletes all that are not master or current
#   -------------------------------------------------------------------
function _force_delete_remote_branches() {
  git branch | grep -v "master" | grep -v "*" | xargs git branch -D
}

##  pull_all_projects <dir>:  Loop through first level directories of given dir and pull new data from each repo.
#   -------------------------------------------------------------------
function pull_all_projects() {
  if [ $# -eq 0 ]; then
    echo "Clean up git branches locally
Usage:
  pull_all_branches ~/dev
    "
    return 1
  fi

  curdir=`pwd`
  cd $1
  dir=`pwd`
  for d in */ ; do
    repo=$dir/$d
    echo "$repo"
    cd $repo
    if [ -d ".git" ]; then
      git pull
    fi
  done
  cd $curdir
}


##  merge_upstream x y z:  Takes a list of branches and merges the first into the second, then second in the third and so on.
#   -------------------------------------------------------------------
function merge_upstream() {
  if (( $# < 2 )); then
    echo "Merge git branches upstream
Usage:
  merge_upstream master 17d.01mp 18a.01qa 18a.02qa 4800-sweet-feature
    "
    return 1
  fi

  echo "Fetch from origin" # git fetch


  SOURCE="$1"
  shift

  echo "Checkout $SOURCE" # git checkout $SOURCE
  echo "Fast Forward $SOURCE to HEAD" # git merge --ff-only origin/$SOURCE

  while (( "$#" )); do
    echo "Checkout $1" # git checkout $1
    echo "Fast Forward $1 to HEAD" # git merge --ff-only origin/$1
    echo "Pull $SOURCE into $1" # git pull $SOURCE
    SOURCE="$1"
    shift
  done
}
